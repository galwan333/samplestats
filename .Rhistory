percentiles(c(1:100))
percentiles = function(data, percentile = 0.5){
#ensures there is enough data being passed through
if(length(data) <= 1){
stop("Data is not valid. Make sure to include at data with at least 1 observation")
}
#ensures the percentile value is valid
if( percentile < 0 ||  percentile > 1){
stop("Please selct a percentile between 0 and 1.")
}
#sorts the data in numeric order
data_sorted = sort(data)
#gets the number of observations in the data
n = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#index of the percentile within the sorted data
percentile_postion = 1 + percentile *(n-1)
if(percentile_postion %% 1 == 0 ){
#if the index is a whole number simply return the corresponding value in the sorted list
return(data_sorted[percentile_postion])
}else{
#if the index is a decimal
#find the whole number indices above and below the percentile index
index_above = ceiling(percentile_postion)
index_below = index_above - 1
#finds the value of the corresponding percentile within the sorted data
percentile_point = percentile * (data_sorted[index_above] - data_sorted[below]) + data_sorted[below]
return(percentile_point)
}
}
percentiles(c(1:100))
percentiles(c(1:100))
percentiles = function(data, percentile = 0.5){
#ensures there is enough data being passed through
if(length(data) <= 1){
stop("Data is not valid. Make sure to include at data with at least 1 observation")
}
#ensures the percentile value is valid
if( percentile < 0 ||  percentile > 1){
stop("Please selct a percentile between 0 and 1.")
}
#sorts the data in numeric order
data_sorted = sort(data)
#gets the number of observations in the data
n = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#index of the percentile within the sorted data
percentile_postion = 1 + percentile *(n-1)
if(percentile_postion %% 1 == 0 ){
#if the index is a whole number simply return the corresponding value in the sorted list
return(data_sorted[percentile_postion])
}else{
#if the index is a decimal
#find the whole number indices above and below the percentile index
index_above = ceiling(percentile_postion)
index_below = index_above - 1
#finds the value of the corresponding percentile within the sorted data
percentile_point = percentile * (data_sorted[index_above] - data_sorted[below]) + data_sorted[below]
return(percentile_point)
}
}
percentiles(c(1:100))
percentiles = function(data, percentile = 0.5){
#ensures there is enough data being passed through
if(length(data) <= 1){
stop("Data is not valid. Make sure to include at data with at least 1 observation")
}
#ensures the percentile value is valid
if( percentile < 0 ||  percentile > 1){
stop("Please selct a percentile between 0 and 1.")
}
#sorts the data in numeric order
data_sorted = sort(data)
#gets the number of observations in the data
n = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#index of the percentile within the sorted data
percentile_postion = 1 + percentile *(n-1)
if(percentile_postion %% 1 == 0 ){
#if the index is a whole number simply return the corresponding value in the sorted list
return(data_sorted[percentile_postion])
}else{
#if the index is a decimal
#find the whole number indices above and below the percentile index
index_above = ceiling(percentile_postion)
index_below = index_above - 1
#finds the value of the corresponding percentile within the sorted data
percentile_point = percentile * (data_sorted[index_above] - data_sorted[index_below]) + data_sorted[below]
return(percentile_point)
}
}
percentiles(c(1:100))
percentiles = function(data, percentile = 0.5){
#ensures there is enough data being passed through
if(length(data) <= 1){
stop("Data is not valid. Make sure to include at data with at least 1 observation")
}
#ensures the percentile value is valid
if( percentile < 0 ||  percentile > 1){
stop("Please selct a percentile between 0 and 1.")
}
#sorts the data in numeric order
data_sorted = sort(data)
#gets the number of observations in the data
n = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#index of the percentile within the sorted data
percentile_postion = 1 + percentile *(n-1)
if(percentile_postion %% 1 == 0 ){
#if the index is a whole number simply return the corresponding value in the sorted list
return(data_sorted[percentile_postion])
}else{
#if the index is a decimal
#find the whole number indices above and below the percentile index
index_above = ceiling(percentile_postion)
index_below = index_above - 1
#finds the value of the corresponding percentile within the sorted data
percentile_point = percentile * (data_sorted[index_above] - data_sorted[index_below]) + data_sorted[index_below]
return(percentile_point)
}
}
percentiles(c(1:100))
percentiles(c(0:100))
iqr(c(1:100))
iqr = function(data){
#since we are calling other functions within this package, we don't need to duplicate code to check for errors
#uses percentiles function within this back to find the iqr
iqr_result = percentiles(data, 0.75) - percentiles(data, 0.25)
return(iqr_result)
}
iqr(c(1:100))
i
central_moments = function(data, moment = 1){
#ensures there is data being passed through
if(length(data) == 0){
stop("ERROR: Data is not valid. Make sure to include valid data")
}
#ensures the moment is non-negative (and not zero) and makes sure the moment parameter is a whole number
if(moment <= 0 || moment %% 1 == 0){
stop("ERROR: Please select a central moment that is a whole number greater than 0.")
}
#number of observations in the data
n  = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#makes sure there are enough observations to calculate the given central moment
if(moment > n){
stop("ERROR: Please include more data points. Cannot calculate nth central moment when there are less than n observations.")
}
#by definition, the first central moment is 0
if(moment == 1){
return(0)
}
#gets the mean of the data
mean_data = sum(data)/n
#initializes new variable for helping calculate the "denominator" correction factor
denominator_correction_factor = 1
#calculates the "denominator" ( = (n-1)*(n-2)*...*(n-moment-1))
for(i in 1:(moment-1)){
denominator_correction_factor = denominator_correction_factor*(n-i)
}
# finds correction factor (= n^moment/"denominator")
correction_factor = n**moment/denominator_correction_factor
# finds the central moment
central_moment_result = sum((data - mean_data)**moment)/(n) * correction_factor
return(central_moment_result)
}
central_moments(c(1:100))
central_moments = function(data, moment = 1){
#ensures there is data being passed through
if(length(data) == 0){
stop("ERROR: Data is not valid. Make sure to include valid data")
}
#ensures the moment is non-negative (and not zero) and makes sure the moment parameter is a whole number
if(moment <= 0 || moment %% 1 != 0){
stop("ERROR: Please select a central moment that is a whole number greater than 0.")
}
#number of observations in the data
n  = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#makes sure there are enough observations to calculate the given central moment
if(moment > n){
stop("ERROR: Please include more data points. Cannot calculate nth central moment when there are less than n observations.")
}
#by definition, the first central moment is 0
if(moment == 1){
return(0)
}
#gets the mean of the data
mean_data = sum(data)/n
#initializes new variable for helping calculate the "denominator" correction factor
denominator_correction_factor = 1
#calculates the "denominator" ( = (n-1)*(n-2)*...*(n-moment-1))
for(i in 1:(moment-1)){
denominator_correction_factor = denominator_correction_factor*(n-i)
}
# finds correction factor (= n^moment/"denominator")
correction_factor = n**moment/denominator_correction_factor
# finds the central moment
central_moment_result = sum((data - mean_data)**moment)/(n) * correction_factor
return(central_moment_result)
}
central_moments(c(1:100))
central_moments(c(1:100),2)
var(c(1:100))
mean(c(2:200))
moments(c(2:200))
central_moments(c(1:100))
central_moments(c(1:100),2)
var(c(1:100))
central_moments = function(data, moment = 1){
#ensures there is data being passed through
if(length(data) == 0){
stop("ERROR: Data is not valid. Make sure to include valid data")
}
#ensures the moment is non-negative (and not zero) and makes sure the moment parameter is a whole number
if(moment <= 0 || moment %% 1 != 0){
stop("ERROR: Please select a central moment that is a whole number greater than 0.")
}
#number of observations in the data
n  = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#makes sure there are enough observations to calculate the given central moment
if(moment > n){
stop("ERROR: Please include more data points. Cannot calculate nth central moment when there are less than n observations.")
}
#by definition, the first central moment is 0
if(moment == 1){
return(0)
}
#gets the mean of the data
mean_data = sum(data)/n
#initializes new variable for helping calculate the "denominator" correction factor
denominator_correction_factor = n
#calculates the "denominator" ( = (n-1)*(n-2)*...*(n-moment-1))
for(i in 1:(moment-1)){
denominator_correction_factor = denominator_correction_factor*(n-i)
}
# finds correction factor (= n^moment/"denominator")
correction_factor = n**moment/denominator_correction_factor
# finds the central moment
central_moment_result = sum((data - mean_data)**moment)/(n) * correction_factor
return(central_moment_result)
}
central_moments(c(1:100),2)
var(c(1:100))
mode(1,2,2,2,2,2)
mode(c(1,2,2,2,2,2))
#
# @return The calculated moment in the form of a numeric value
#
# @param data Is a list/vector of only numeric values
#
# @examples
# mode(c(1,2,3,3,1,3,44,6))
#
# @export
#
mode = function(data){
#ensures there is data being passed through
if(is.na(data) || length(data) == 0){
stop("ERROR: Data is not valid. Make sure to include valid data")
}
n = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#creates a table of number of observations per unique value
table_data = table(data)
#indicates the the maximum number of observations amongst the unique values is
max_occurances = max(table_data)
#sorts the original data in numeric order
sorted_data = sort(unique(data))
#indicates if the unique value in the data is a mode or not
mode_TF = 1
#extracts all of the mode(s) from the data
mode_values = sorted_data[which(table_data == max_occurances)]
return(mode_values)
}
mode(c(1,2,2,2,2,2))
#
# @return The calculated moment in the form of a numeric value
#
# @param data Is a list/vector of only numeric values
#
# @examples
# mode(c(1,2,3,3,1,3,44,6))
#
# @export
#
mode = function(data){
#ensures there is data being passed through
if(length(data) == 0){
stop("ERROR: Data is not valid. Make sure to include valid data")
}
n = length(data)
#ensures all of the data is numeric (this package only deals with numeric data)
for(i in 1:n){
if(!is.numeric(data[i])){
stop("ERROR: make sure all of the data is numeric data")
}
}
#creates a table of number of observations per unique value
table_data = table(data)
#indicates the the maximum number of observations amongst the unique values is
max_occurances = max(table_data)
#sorts the original data in numeric order
sorted_data = sort(unique(data))
#indicates if the unique value in the data is a mode or not
mode_TF = 1
#extracts all of the mode(s) from the data
mode_values = sorted_data[which(table_data == max_occurances)]
return(mode_values)
}
mode(c(1,2,2,2,2,2))
coefficient_of_variation(c(1:100))
#
# @return The calculated coefficient of variation
#
# @param data Is a list/vector of only numeric values
#
# @examples
# coefficient_of_variation(c(1:100))
#
# @export
#
coefficient_of_variation = function(data){
#since we are calling other functions within this package, we don't need to duplicate code to check for errors
#uses moments function within this package to find the mean
mean_of_data = moments(data, 1)
#uses central moments function within this package to find the sample variance
sample_sd = sqrt(central_moments(data,2))
#ensures the mean isn't 0
if(mean_of_data == 0){
stop("ERROR: Cannot calculate as the mean of the data is 0.")
}
#calculates coefficient of variation in terms of a percentage
cv = sample_sd/ mean_of_data*100
return(cv)
}
coefficient_of_variation(c(1:100))
library(devtools)
document("samplestats")
setwd("~/")
document("samplestats")
document("samplestats")
rm(list = c("central_moments", "coefficient_of_variation", "iqr", "mode", "moments",
"percentiles"))
install.packages("usethis")
install.packages("rmarkdown")
#install packages
install.packages("EnvStats")
install.packages("samplestats")
install.packages("bench")
install.packages("samplestats")
#load packages
library(samplestats)
install.packages("samplestats")
library(samplestats)
install.packages("devtools")
library(devtools)
#install packages
install.packages("EnvStats")
install.packages("samplestats")
install.packages("bench")
install.packages("samplestats")
#load packages
library(samplestats)
install.packages("devtools")
library(devtools)
install.packages("devtools")
load_all("samplestats")
setwd("~/")
load_all("samplestats")
load_all("samplestats")
#load packages
library(samplestats)
library(EnvStats)
library(bench)
set.seed(400)
dat = rnorm(50, mean = 1000, sd = 2)
x = iqr(dat) #our function
y = IQR(dat) #what we expect
print(all.equal(x,y))
efficiency =  bench::mark(iqr(dat),IQR(dat))
print(efficiency)
percentiles = function(data, percentile = 0.5){
#ensures there is enough data being passed through
if(length(data) <= 1){
stop("Data is not valid. Make sure to include at data with at least 1 observation")
}
#ensures the percentile value is valid
if( percentile < 0 ||  percentile > 1){
stop("Please selct a percentile between 0 and 1.")
}
#sorts the data in numeric order
data_sorted = sort(data)
#gets the number of observations in the data
n = length(data)
#index of the percentile within the sorted data
percentile_postion = 1 + percentile *(n-1)
if(percentile_postion %% 1 == 0 ){
#if the index is a whole number simply return the corresponding value in the sorted list
return(data_sorted[percentile_postion])
}else{
#if the index is a decimal
#find the whole number indices above and below the percentile index
index_above = ceiling(percentile_postion)
index_below = index_above - 1
#finds the value of the corresponding percentile within the sorted data
percentile_point = percentile * (data_sorted[index_above] - data_sorted[index_below]) + data_sorted[index_below]
return(percentile_point)
}
}
#'
#' @return The calculated coefficient of variation
#'
#' @param data Is a list/vector of only numeric values
#'
#' @examples
#' coefficient_of_variation(c(1:100))
#'
#' @export
#'
coefficient_of_variation = function(data){
#since we are calling other functions within this package, we don't need to duplicate code to check for errors
#uses moments function within this package to find the mean
mean_of_data = moments(data, 1)
#uses central moments function within this package to find the sample variance
sample_sd = sqrt(central_moments(data,2))
#ensures the mean isn't 0
if(mean_of_data == 0){
stop("ERROR: Cannot calculate as the mean of the data is 0.")
}
#calculates coefficient of variation in terms of a percentage
cv = sample_sd/ mean_of_data*100
return(cv)
}
central_moments = function(data, moment = 1){
#ensures there is data being passed through
if(length(data) == 0){
stop("ERROR: Data is not valid. Make sure to include valid data")
}
#ensures the moment is non-negative (and not zero) and makes sure the moment parameter is a whole number
if(moment <= 0 || moment %% 1 != 0){
stop("ERROR: Please select a central moment that is a whole number greater than 0.")
}
#number of observations in the data
n  = length(data)
#makes sure there are enough observations to calculate the given central moment
if(moment > n){
stop("ERROR: Please include more data points. Cannot calculate nth central moment when there are less than n observations.")
}
#by definition, the first central moment is 0
if(moment == 1){
return(0)
}
#gets the mean of the data
mean_data = sum(data)/n
#initializes new variable for helping calculate the "denominator" correction factor
denominator_correction_factor = n
#calculates the "denominator" ( = (n-1)*(n-2)*...*(n-moment-1))
for(i in 1:(moment-1)){
denominator_correction_factor = denominator_correction_factor*(n-i)
}
# finds correction factor (= n^moment/"denominator")
correction_factor = n**moment/denominator_correction_factor
# finds the central moment
central_moment_result = sum((data - mean_data)**moment)/(n) * correction_factor
return(central_moment_result)
}
moments = function(data, moment = 1){
moments = function(data, moment = 1){
moments = function(data, moment = 1){
moments = function(data, moment = 1){
